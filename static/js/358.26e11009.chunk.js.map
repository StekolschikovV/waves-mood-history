{"version":3,"file":"static/js/358.26e11009.chunk.js","mappings":"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","sources":["webpack://waves-mood-hostory/./src/components/mood-canvas/style.module.scss?fc87","components/mood-canvas/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moodCanvasWrapper\":\"style_moodCanvasWrapper__X2RkM\",\"moodCanvas\":\"style_moodCanvas__yZGyq\",\"innerContainer\":\"style_innerContainer__DxoJA\",\"text\":\"style_text__LR1oy\",\"colorList\":\"style_colorList__ePnh7\",\"colorElement\":\"style_colorElement__7Mv7o\",\"colorElementSelected\":\"style_colorElementSelected__JbpO0\",\"canvaWrapper\":\"style_canvaWrapper__wytE4\",\"canva\":\"style_canva__oC2rC\",\"canvaRow\":\"style_canvaRow__fZpy4\",\"canvaElement\":\"style_canvaElement__M2FZ0\",\"controls\":\"style_controls__7dNJA\",\"btnGroup\":\"style_btnGroup__Dh4oD\",\"btn\":\"style_btn__id0h3\",\"pixelUsed\":\"style_pixelUsed__fxVH8\",\"selectedTokenTitle\":\"style_selectedTokenTitle__JOGLp\",\"selectedTokenWrapper\":\"style_selectedTokenWrapper__sObL7\",\"selectedTokenSelected\":\"style_selectedTokenSelected__NX0Aw\",\"historyLine\":\"style_historyLine__uvHz5\",\"historyStep\":\"style_historyStep__wup8X\",\"historyStepSelected\":\"style_historyStepSelected__2U0Hc\"};","import styles from \"./style.module.scss\"\nimport React, {useEffect, useState} from \"react\";\nimport {InvokeArgs, Signer} from \"@waves/signer\";\nimport {ProviderKeeper} from \"@waves/provider-keeper\";\nimport Moment from 'react-moment';\nimport {toast} from 'react-toastify';\nimport {IBlockchainData, ILogData, IPixel} from \"../../interface\";\n\nexport default function MoodCanvas({data}: { data: any }) {\n\n\n    const width = 100\n    const height = 100\n    const colors = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive', 'purple', 'red', 'silver', 'teal', 'white', 'yellow']\n\n    const [selectedToken, setSelectedToken] = useState<\"USDT\" | \"USDC\">(\"USDT\")\n    const [selectedColor, setSelectedColor] = useState(\"blue\")\n    const [selectedPixel, setSelectedPixel] = useState<IPixel[]>([])\n    const [selectedPixelNew, setSelectedPixelNew] = useState<IPixel[]>([])\n    const [isMouseDown, setIsMouseDown] = useState(false)\n    const [log, setLog] = useState<IBlockchainData[]>([])\n    const [selectedLog, setSelectedLog] = useState<string | number>(\"now\")\n\n    const signer = new Signer({\n        NODE_URL: 'https://nodes.wavesnodes.com',\n    });\n    const keeper = new ProviderKeeper();\n    signer.setProvider(keeper);\n\n    const decompressData = (data: string) => {\n        return data.split(\"|\").filter((e: string) => !!e).map((e: string) => {\n            const el = e.split(\"-\")\n            return {\n                color: el[0],\n                width: +el[1],\n                height: +el[2]\n            }\n        })\n    }\n\n    const isPixelSelected = (width: number, height: number, isNew = false): string | boolean => {\n        let result: any\n        (isNew ? selectedPixelNew : selectedPixel).forEach((pixel: IPixel) => {\n            if (pixel.width === width && pixel.height === height) {\n                result = pixel.color\n            }\n        })\n        return result ? result : false\n    }\n\n    const onClickSaveHandler = async () => {\n        let USDTWXG = \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\"\n        let USDCWXG = \"6XtHjpXbs9RRJP2Sr9GUyVqzACcby9TkThHXnjVC5CDJ\"\n        const data: InvokeArgs = {\n            dApp: \"3PAmW4yzC5W9paLoBUN1K5CZU4dfMM4fkWE\",\n            fee: 500000,\n            payment: [{\n                assetId: selectedToken === \"USDT\" ? USDTWXG : USDCWXG,\n                amount: 10000 * selectedPixelNew.length,\n            }],\n            call: {\n                function: 'draw',\n                args: [\n                    {\n                        type: \"list\",\n                        value: selectedPixelNew\n                            .map(e => `${e.color}-${e.width}-${e.height}`)\n                            .map(e => {\n                                return {\n                                    type: 'string',\n                                    value: e\n                                }\n                            })\n                    }\n                ]\n            },\n        }\n        await signer\n            .invoke(data)\n            .broadcast()\n            .then(e => {\n                if (e && e[0]?.type === 16) {\n                    toast('Request sent successfully!', {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                    });\n                } else {\n                    toast('An error occurred, please check your wallet!', {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                    });\n                }\n                console.log(e)\n            })\n            .catch((e) => {\n                console.log(\"error\", e)\n                if (e?.message?.includes(\"WavesKeeper is not installed.. This is not error of signer\")) {\n                    toast(\"WavesKeeper not found! You need to install a WavesKeeper to use the app!\", {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                    });\n                } else {\n                    toast(e?.message, {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                    });\n                }\n                setSelectedPixelNew([])\n            })\n        setTimeout(() => {\n            setSelectedPixelNew([])\n        }, 7000)\n    }\n\n    const onClickCanselHandler = () => {\n        setSelectedPixelNew(selectedPixelNew.filter((_, i, a) => i !== (a.length - 1)))\n    }\n    const addNewPixelHandler = (pixel: IPixel) => {\n        if (selectedPixelNew.length < 60) {\n            let oldPixels = selectedPixelNew.filter(p => !(p.height === pixel.height && p.width === pixel.width))\n            setSelectedPixelNew([...oldPixels, pixel])\n        } else {\n            toast('60 pixels max per transaction!', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                theme: \"light\",\n            });\n        }\n    }\n\n    const [isInit, setInit] = useState(false)\n\n    useEffect(() => {\n        if (data) {\n            let logData = data\n                .filter((e: IBlockchainData) => e.key.includes(\"log_\"))\n                .map((e: IBlockchainData) => {\n                    if (e.key.replaceAll('_', '').length > 0) {\n                        return {...e, key: `${e.key.split(\"_\")[0]}_${e.key.split(\"_\")[1]}`}\n                    } else {\n                        return e\n                    }\n                })\n                .reduce((acc: IBlockchainData[] = [], next: IBlockchainData,) => {\n                    let ifExist = false\n                    // console.log(\"+++acc\", acc, next)\n                    // if (acc.length === undefined) return [acc]\n                    if (acc.length === undefined) {\n                        return [acc, next]\n                    }\n                    // console.log(\"+++acc\", acc.length, next)\n                    acc?.forEach(a => {\n                        if (a.key === next.key) {\n                            ifExist = true\n                        }\n                    })\n                    if (!ifExist) {\n                        return [...acc, next]\n                    } else {\n                        return acc.map(e => {\n                            if (e.key !== next.key) {\n                                return e\n                            } else {\n                                return {...e, value: e.value + \"|\" + next.value}\n                            }\n                        })\n                    }\n                })\n            setSelectedPixel(decompressData(\n                data\n                    .filter((e: IBlockchainData) => e.key.includes(\"-\"))\n                    .map((e: IBlockchainData) => `|${e.value}-${e.key}`).join(\"\"))\n            )\n            setLog(logData)\n            let element: any = document.querySelector(`.historyLine`)\n\n            if (!isInit && element) {\n                setInit(true)\n                setTimeout(() => {\n                    element.scrollLeft = element?.scrollWidth\n                }, 3000)\n            }\n        }\n    }, [data])\n\n    const logPoints = log?.map(e => +(e?.key?.split(\"_\")[1])).sort((a, b) => a - b)\n\n    function onClickLogHandler(id: number | string) {\n        let result: IPixel[] = []\n        log\n            .map(e => {\n                return {...e, id: +e.key.split(\"_\")[1]}\n            })\n            .filter(e => id !== \"now\" ? e.id <= id : true)\n            .sort((a: ILogData, b: ILogData) => a.id - b.id)\n            .map(e => {\n                const stepData = decompressData(e.value) as unknown as IPixel\n                result = result.concat(stepData)\n            })\n        setSelectedLog(id)\n        setSelectedPixel(result)\n    }\n\n    return <div className={styles.moodCanvasWrapper} id={\"mood-canvas\"}>\n        <div className={`container ${styles.moodCanvas}`}>\n            <div className={\"title\"}>Mood canvas</div>\n            <div className={styles.innerContainer}>\n                <div className={styles.text}>\n                    This drawing will be permanently stored in the blockchain on behalf of your account. Try to express\n                    your emotions by answering the following questions:\n                    <ul>\n                        <li>\n                            What is your waves mood today?\n                        </li>\n                        <li>\n                            What would you like to be recorded in history today?\n                        </li>\n                        <li>\n                            How would you describe your current state of mind?\n                        </li>\n                        <li>\n                            What thoughts or memories are evoking strong emotions within you right now?\n                        </li>\n                    </ul>\n                </div>\n                <div className={styles.canvaWrapper}>\n\n                    <ul className={styles.colorList}>\n                        {colors.map(color => <li\n                            key={color}\n                            className={`${styles.colorElement} ${selectedColor === color && styles.colorElementSelected}`}\n                            style={{background: color}}\n                            onClick={e => setSelectedColor(color)}\n                        ></li>)}\n                    </ul>\n                    <div\n                        onMouseDown={() => setIsMouseDown(true)}\n                        onMouseUp={() => setIsMouseDown(false)}\n                        className={styles.canva}\n                    >\n                        {Array.from({length: height}).map((row, rowI) => {\n                            return <div key={`${rowI}`} className={styles.canvaRow}>\n                                {Array.from({length: width}).map((pixel, pixelI) => {\n                                    let isPixelSelectedLoc = isPixelSelected(rowI, pixelI, false)\n                                    let isPixelSelectedLocNew = selectedLog === \"now\" ? isPixelSelected(rowI, pixelI, true) : []\n                                    let bg = \"none\"\n                                    if (typeof isPixelSelectedLocNew === \"string\") bg = isPixelSelectedLocNew\n                                    else if (typeof isPixelSelectedLoc === \"string\") bg = isPixelSelectedLoc\n                                    return <div\n                                        key={`${rowI}${pixelI}`}\n                                        className={`${styles.canvaElement}`}\n                                        style={{background: bg}}\n                                        onClick={() => addNewPixelHandler({\n                                            width: rowI,\n                                            height: pixelI,\n                                            color: selectedColor\n                                        })}\n                                        onMouseEnter={() => {\n                                            if (isMouseDown) addNewPixelHandler({\n                                                width: rowI,\n                                                height: pixelI,\n                                                color: selectedColor\n                                            })\n                                        }}\n                                    ></div>\n                                })}\n                            </div>\n                        })}\n                    </div>\n                </div>\n\n                <div className={styles.controls}>\n                    <div className={styles.selectedToken}>\n                        <div className={styles.selectedTokenTitle}>Payment in token:</div>\n                        <div className={styles.selectedTokenWrapper}>\n                            <span\n                                onClick={e => setSelectedToken(\"USDT\")}\n                                className={selectedToken === \"USDT\" ? styles.selectedTokenSelected : \"\"}>USDT-WXG</span>\n                            <span\n                                onClick={e => setSelectedToken(\"USDC\")}\n                                className={selectedToken === \"USDC\" ? styles.selectedTokenSelected : \"\"}>USDC-WXG</span>\n                        </div>\n                    </div>\n                    <div className={styles.pixelUsed}>\n                        {selectedPixelNew.length}\n                        <span>pixels used</span>\n                    </div>\n                    <div className={styles.btnGroup}>\n                        <button className={styles.btn}>Refresh</button>\n                        <button className={styles.btn} onClick={() => onClickCanselHandler()}>Undo last</button>\n                        <button disabled={selectedPixelNew.length === 0} className={styles.btn}\n                                onClick={() => onClickSaveHandler()}>Save and burn WXG\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"container-full\">\n            <ul className={`historyLine ${styles.historyLine}`}>\n                {logPoints.map((id, i) =>\n                    <li key={`${id}-${i}`}\n                        className={`${styles.historyStep} ${id === selectedLog && styles.historyStepSelected}`}\n                        onClick={() => onClickLogHandler(id)}>\n                        <div>\n                            <Moment format=\"YYYY/MM/DD\">\n                                {id}\n                            </Moment>\n                        </div>\n                        <span>\n                     <Moment format=\"HH:mm\">\n                         {id}\n                     </Moment>\n                 </span>\n                    </li>)}\n                <li\n                    onClick={() => onClickLogHandler(\"now\")}\n                    key={`now`}\n                    className={`historyStepNow ${styles.historyStep} ${selectedLog === \"now\" && styles.historyStepSelected}`}>\n                    <div>\n                        NOW\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </div>\n\n}"],"names":["MoodCanvas","_ref","data","_useState","useState","_useState2","_slicedToArray","selectedToken","setSelectedToken","_useState3","_useState4","selectedColor","setSelectedColor","_useState5","_useState6","selectedPixel","setSelectedPixel","_useState7","_useState8","selectedPixelNew","setSelectedPixelNew","_useState9","_useState10","isMouseDown","setIsMouseDown","_useState11","_useState12","log","setLog","_useState13","_useState14","selectedLog","setSelectedLog","signer","Signer","NODE_URL","keeper","ProviderKeeper","setProvider","decompressData","split","filter","e","map","el","color","width","height","isPixelSelected","result","arguments","length","undefined","forEach","pixel","onClickSaveHandler","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","dApp","fee","payment","assetId","amount","call","function","args","type","value","concat","invoke","broadcast","then","_e$","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","theme","console","catch","_e$message","message","includes","setTimeout","stop","apply","addNewPixelHandler","oldPixels","p","_toConsumableArray","_useState15","_useState16","isInit","setInit","useEffect","logData","key","replaceAll","_objectSpread","reduce","acc","ifExist","a","join","element","document","querySelector","scrollLeft","scrollWidth","logPoints","_e$key","sort","b","onClickLogHandler","id","stepData","_jsxs","className","styles","moodCanvasWrapper","children","moodCanvas","_jsx","innerContainer","text","canvaWrapper","colorList","colorElement","colorElementSelected","style","background","onClick","onMouseDown","onMouseUp","canva","Array","from","row","rowI","canvaRow","pixelI","isPixelSelectedLoc","isPixelSelectedLocNew","bg","canvaElement","onMouseEnter","controls","selectedTokenTitle","selectedTokenWrapper","selectedTokenSelected","pixelUsed","btnGroup","btn","_","i","disabled","historyLine","historyStep","historyStepSelected","Moment","format"],"sourceRoot":""}